{
  "info": {
    "name": "Menu Translation API - WebSocket",
    "description": "API endpoints for menu translation web app with real-time WebSocket updates",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Check if the backend server is running"
      }
    },
    {
      "name": "WebSocket Test Page",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        },
        "description": "Open browser page to test WebSocket real-time events"
      }
    },
    {
      "name": "Translate Menu - Basic (with WebSocket)",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "image",
              "type": "file",
              "src": [],
              "description": "Upload a menu image (JPEG, PNG, or WebP) - REQUIRED"
            },
            {
              "key": "targetLanguage",
              "value": "English",
              "type": "text",
              "description": "Target language for translation"
            },
            {
              "key": "generateImages",
              "value": "true",
              "type": "text",
              "description": "Whether to generate food images (true/false)"
            },
            {
              "key": "socketId",
              "value": "test-socket-123",
              "type": "text",
              "description": "WebSocket room ID for real-time updates - REQUIRED"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/api/translate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "translate"]
        },
        "description": "Upload menu image and get real-time translation updates via WebSocket. Response will be HTTP 202 immediately, then watch WebSocket events at http://localhost:3001/"
      }
    },
    {
      "name": "Translate Menu - Spanish",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "image",
              "type": "file",
              "src": [],
              "description": "Upload a menu image"
            },
            {
              "key": "targetLanguage",
              "value": "Spanish",
              "type": "text"
            },
            {
              "key": "generateImages",
              "value": "false",
              "type": "text"
            },
            {
              "key": "socketId",
              "value": "spanish-test-456",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/api/translate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "translate"]
        },
        "description": "Translate menu to Spanish without generating images"
      }
    },
    {
      "name": "Translate Menu - French",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "image",
              "type": "file",
              "src": [],
              "description": "Upload a menu image"
            },
            {
              "key": "targetLanguage",
              "value": "French",
              "type": "text"
            },
            {
              "key": "generateImages",
              "value": "true",
              "type": "text"
            },
            {
              "key": "socketId",
              "value": "french-test-789",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/api/translate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "translate"]
        },
        "description": "Translate menu to French with image generation"
      }
    },
    {
      "name": "Error - Missing socketId",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "image",
              "type": "file",
              "src": []
            },
            {
              "key": "targetLanguage",
              "value": "English",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/api/translate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "translate"]
        },
        "description": "Test validation error when socketId is missing"
      }
    },
    {
      "name": "Error - No Image",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "targetLanguage",
              "value": "English",
              "type": "text"
            },
            {
              "key": "socketId",
              "value": "error-test-no-image",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/api/translate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "translate"]
        },
        "description": "Test error handling when no image is provided"
      }
    },
    {
      "name": "Error - Invalid File Type",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "image",
              "type": "file",
              "src": [],
              "description": "Upload a non-image file (e.g., .txt, .pdf)"
            },
            {
              "key": "targetLanguage",
              "value": "English",
              "type": "text"
            },
            {
              "key": "socketId",
              "value": "error-test-invalid-file",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/api/translate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "translate"]
        },
        "description": "Test error handling for invalid file types"
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic timestamp for requests",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Basic response validation",
          "pm.test('Response time is less than 5s', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper Content-Type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Validate successful translation responses (HTTP 202)",
          "if (pm.response.code === 202 && pm.request.url.path.includes('translate')) {",
          "    pm.test('Translation accepted response has required fields', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success', true);",
          "        pm.expect(jsonData).to.have.property('message');",
          "        pm.expect(jsonData).to.have.property('socketId');",
          "        pm.expect(jsonData).to.have.property('status', 'processing');",
          "    });",
          "    ",
          "    pm.test('Processing started successfully', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData.message).to.equal('Processing started');",
          "    });",
          "}",
          "",
          "// Validate error responses",
          "if (pm.response.code >= 400) {",
          "    pm.test('Error response has proper structure', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success', false);",
          "        pm.expect(jsonData).to.have.property('error');",
          "    });",
          "}",
          "",
          "// Health check validation",
          "if (pm.request.url.path.includes('health')) {",
          "    pm.test('Health check returns OK', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('status', 'OK');",
          "        pm.expect(jsonData).to.have.property('timestamp');",
          "    });",
          "}"
        ]
      }
    }
  ]
}